<project name="miPhysics Processing Library" default="clean" basedir="../">


    <!--
        Properties for your project should be set and modified in the
        build.properties file (located in the same folder as this build.xml file).

        THIS FILE SHOULD NOT BE EDITED, unless you know what you are doing.
        If you have recommendations for improvements, please let Elie know
        at prisonerjohn@gmail.com
-->



    <property file="./resources/build.properties" />

    <description>
        ${ant.description}
    </description>




    <property name="line" value="------------------------------------------------------------------------------------------------" />

    <condition property="is.normal">
        <equals arg1="${project.compile}" arg2="normal" />
    </condition>


    <!-- set the OS properties -->
    <condition property="is.mac">
        <os family="mac" />
    </condition>
    <condition property="is.windows">
        <os family="windows" />
    </condition>
    <condition property="is.unix">
        <os family="unix" />
    </condition>

    <property name="project.jar.name" value="${library.name}.jar" />
    <property name="project.src" location="src" />
    <property name="project.tmp" location="tmp" />
    <property name="project.web" location="resources/web" />
    <property name="project.data" location="resources/data" />
    <property name="project.lib" location="lib" />
    <property name="project.bin" location="bin" />
    <property name="project.bin.data" location="${project.bin}/data" />
    <property name="project.examples" location="resources/examples" />
    <property name="project.reference" location="reference" />
    <property name="project.dist" location="distribution" />
    <property name="project.dist.version" location="distribution/${library.name}-${library.version}" />
    <property name="install.source" location="resources/README.md" />
    <property name="install.destination" location="${project.dist.version}/README.md" />
    <property name="libprops.source" location="resources/library.properties" />


    <property name="project.misc" location="resources/misc" />

<!--
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="./resources/code/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>
-->

    <path id="classpath">
        <fileset dir="${classpath.local.location}" includes="${classpath.local.include}" />
        <fileset dir="${classpath.libraries.location}" includes="**/*.jar" />
        <fileset dir="${project.lib}" includes="**/*.jar" />
    </path>



    <!-- Create the time stamp -->
    <tstamp>
        <format property="date" pattern="MM/dd/yyyy" offset="0" unit="hour" />
    </tstamp>

    <target name="init">
        <echo level="info">${line}
            Building the Processing Library ${library.name} ${library.version}
            ${line}
            src path        ${project.src}
            bin path        ${project.bin}
            classpath.local	${classpath.local.location}
            sketchbook      ${sketchbook.location}
            java version    ${java.target.version}
            ${line}
        </echo>


        <mkdir dir="${project.bin}" />
    </target>



    <target name="library.init" depends="init">
        <echo level="info" message="init library ${library.name} ..." />
    </target>



    <target name="library.run" depends="library.init">
        <echo level="info" message="building library ... ${library.name}" />
        <antcall target="generate.structure">
            <param name="folder" value="library" />
        </antcall>
       <!-- <antcall target="generate.source" /> -->
        <antcall target="copy.jar"/>
<!--        <antcall target="generate.javadoc" /> -->
        <antcall target="generate.libprops" />
        <antcall target="copyToSketchbook">
            <param name="folder" value="libraries" />
        </antcall>
   <!--      <antcall target="generate.distribution" />
        <antcall target="generate.install.library" />
        <antcall target="generate.web" />
        <antcall target="generate.zip" />
        <delete dir="${project.tmp}" />-->
    </target>



    <target name="generate.libprops" if="is.normal">
        <property name="libprops.destination" location="${project.tmp}/${library.name}/library.properties" />
        <copy file="${libprops.source}" tofile="${libprops.destination}" />
        <antcall target="parse.file">
            <param name="file" value="${libprops.destination}" />
        </antcall>
    </target>



    <target name="copyToSketchbook">
        <echo level="info" message="copying files to the ${folder} folder in your sketchbook." />
        <!-- copy the jar file to processing's sketchbook libraries folder -->
        <delete dir="${sketchbook.location}/${folder}/${library.name}" />
        <mkdir dir="${sketchbook.location}/${folder}/${library.name}" />
        <copy todir="${sketchbook.location}/${folder}/${library.name}">
            <fileset dir="${project.tmp}/${library.name}" />
        </copy>
    </target>


    <target name="compile">
        <javac srcdir="${project.tmp}/${library.name}/src" destdir="${project.bin}" source="${java.target.version}" target="${java.target.version}" includeantruntime="false">
            <classpath>
                <path refid="classpath" />
            </classpath>
            <compilerarg value="-Xlint" />
        </javac>
        <copy todir="${project.bin.data}">
            <fileset dir="${project.data}" excludes="README" />
        </copy>
    </target>


    <target name="generate.jar">
        <jar jarfile="${project.tmp}/${library.name}/${folder}/${project.jar.name}" basedir="${project.bin}" />
    </target>

    <target name="copy.jar">
        <copy todir="${project.tmp}/${library.name}/library" >
            <!-- <fileset dir="../miPhysics-core/target" includes="*.jar"/> -->
            <fileset dir="target" includes="*.jar" excludes="miPhysics-processing*.jar"/>
        </copy>
        <copy tofile="${project.tmp}/${library.name}/library/${library.name}.jar">
            <fileset dir="target" includes="miPhysics-processing*.jar"/>
        </copy>

        <!--         -->
    </target>


    <target name="generate.structure">
        <delete dir="${project.tmp}" />
        <mkdir dir="${project.tmp}" />
        <mkdir dir="${project.tmp}/${library.name}" />
        <mkdir dir="${project.tmp}/${library.name}/${folder}" />
        <mkdir dir="${project.tmp}/${library.name}/examples" />
        <mkdir dir="${project.tmp}/${library.name}/reference" />
        <mkdir dir="${project.tmp}/${library.name}/src" />
        <mkdir dir="${project.tmp}/${library.name}/data" />
        <copy todir="${project.tmp}/${library.name}/examples">
            <fileset dir="${project.examples}">
                <exclude name="**/*README*" />
                <!-- not including the ModelLoader examples for now -->
                <exclude name="**/5_ModelLoader/**" />
            </fileset>
        </copy>
        <copy todir="${project.tmp}/${library.name}/src">
            <fileset dir="${project.src}" />
        </copy>
        <copy todir="${project.tmp}/${library.name}/data">
            <fileset dir="${project.data}">
                <exclude name="**/*README*" />
            </fileset>
        </copy>


        <copy todir="${project.tmp}/${library.name}/">
            <fileset dir="${project.misc}">
                <!--exclude name="**/*README*" /-->
            </fileset>
        </copy>



    </target>



    <target name="generate.distribution" if="is.normal">
        <mkdir dir="${project.dist}" />
        <delete dir="${project.dist.version}" />
        <mkdir dir="${project.dist.version}" />
        <mkdir dir="${project.dist.version}/${library.name}" />
        <move file="${project.tmp}/${library.name}" toDir="${project.dist.version}" />
    </target>






      <!-- find and replace ##placeholder## keywords in a file -->
    <target name="parse.file">
        <echo level="info" message="${file}" />

        <replaceregexp file="${file}" match="##date##" replace="${date}" flags="g" />
        <replaceregexp file="${file}" match="##copyright##" replace="${library.copyright}" flags="g" />

        <replaceregexp file="${file}" match="##author##" replace="${author.name} ${author.url}" flags="g" />
        <replaceregexp file="${file}" match="##author.name##" replace="${author.name}" flags="g" />
        <replaceregexp file="${file}" match="##author.url##" replace="${author.url}" flags="g" />

        <replaceregexp file="${file}" match="##library.name##" replace="${project.prettyName}" flags="g" />
        <replaceregexp file="${file}" match="##library.name##" replace="${library.name}" flags="g" />

        <replaceregexp file="${file}" match="##library.version##" replace="${library.version}" flags="g" />
        <replaceregexp file="${file}" match="##library.prettyVersion##" replace="${library.prettyVersion}" flags="g" />

        <replaceregexp file="${file}" match="##compatible.minRevision##" replace="${compatible.minRevision}" flags="g" />
        <replaceregexp file="${file}" match="##compatible.maxRevision##" replace="${compatible.maxRevision}" flags="g" />

        <replaceregexp file="${file}" match="##library.url##" replace="${library.url}" flags="g" />
        <replaceregexp file="${file}" match="##library.categories##" replace="${library.categories}" flags="g" />
        <replaceregexp file="${file}" match="##library.sentence##" replace="${library.sentence}" flags="g" />
        <replaceregexp file="${file}" match="##library.paragraph##" replace="${library.paragraph}" flags="g" />
        <replaceregexp file="${file}" match="##library.keywords##" replace="${library.keywords}" flags="g" />
        <replaceregexp file="${file}" match="##library.dependencies##" replace="${library.dependencies}" flags="g" />

        <replaceregexp file="${file}" match="##source.host##" replace="${source.host}" flags="g" />
        <replaceregexp file="${file}" match="##source.url##" replace="${source.url}" flags="g" />
        <replaceregexp file="${file}" match="##source.repository##" replace="${source.repository}" flags="g" />

        <replaceregexp file="${file}" match="##tested.platform##" replace="${tested.platform}" flags="g" />
        <replaceregexp file="${file}" match="##tested.processingVersion##" replace="${tested.processingVersion}" flags="g" />
    </target>



    <target name="generate.install.library" if="is.normal">
        <copy file="${install.source}" tofile="${install.destination}" />

        <antcall target="parse.file">
            <param name="file" value="${install.destination}" />
        </antcall>
    </target>



    <target name="generate.zip" if="is.normal">
        <!-- zip the distribution of the Library -->

        <move todir="${project.dist.version}/tmp/${library.name}">
            <fileset dir="${project.dist.version}/${library.name}" />
        </move>

        <copy file="${project.dist.version}/tmp/${library.name}/library.properties" tofile="${project.dist.version}/web/download/${library.name}.txt" />

        <zip destfile="${project.dist.version}/${library.name}.zip" basedir="${project.dist.version}/tmp" excludes="**/.DS_Store" />

        <move file="${project.dist.version}/${library.name}.zip" todir="${project.dist.version}/web/download" />

        <copy file="${project.dist.version}/web/download/${library.name}.zip" tofile="${project.dist.version}/web/download/${library.name}-${library.version}.zip" />
        <copy file="${project.dist.version}/web/download/${library.name}.txt" tofile="${project.dist.version}/web/download/${library.name}-${library.version}.txt" />

        <move todir="${project.dist.version}">
            <fileset dir="${project.dist.version}/web" />
        </move>

        <delete dir="${project.dist.version}/tmp" />
    </target>





    <target name="clean" depends="library.run">
        <delete dir="${project.bin}" />
        <delete dir="${project.tmp}" />
        <echo level="info">

            ${line}
            Name        ${library.name}
            Version     ${library.prettyVersion} (${library.version})
            Compiled    ${project.compile}
            Sketchbook  ${sketchbook.location}
            ${line}
            done, finished.
            ${line}
        </echo>
    </target>

</project>

